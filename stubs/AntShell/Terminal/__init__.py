from typing import Optional, Protocol
import abc

from System import ConsoleColor


class IIOSource(Protocol):
    @abc.abstractmethod
    def Flush(self) -> None: ...
    @abc.abstractmethod
    def Write(self, b: int) -> None: ...


class IOProvider:
    def __init__(self) -> None: ...
    @property
    def Backend(self) -> IIOSource: ...
    @Backend.setter
    def Backend(self, value: IIOSource) -> IIOSource: ...
    @property
    def HasNewInput(self) -> bool: ...
    def CancelGet(self) -> None: ...
    def ClearPeeked(self) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> None: ...
    def GetNextByte(self) -> int: ...
    def GetNextChar(self) -> Optional[str]: ...
    def Pause(self) -> None: ...
    def Resume(self) -> None: ...


class BasicTerminalEmulator: ...


class NavigableTerminalEmulator(BasicTerminalEmulator):
    def __init__(self, io: IOProvider, forceVCursor: bool = False): ...
    def WriteRaw(self, text: str, color: Optional[ConsoleColor] = None): ...
    def NewLine(self): ...
